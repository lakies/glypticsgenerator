float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

void depth_vp(float4 position	: POSITION,
            out float4 oPosition    : POSITION,
            out float  depth		 : TEXCOORD0,
            uniform float nearClip,
            uniform float farClip,
			uniform float4x4 proj,
			uniform float4x4 worldView)
{
    float4 pos = mul(worldView, position);
	oPosition = mul(proj, pos);
	depth = map(-pos.z, nearClip, farClip, 0, 1);
}


float3 depth_fp( float depth : TEXCOORD0, uniform float strength ) : COLOR
{
	return float3(depth, -1 + strength, 0);
}

// void strength_vp(float4 position	: POSITION,
//             out float4 oPosition    : POSITION,
// 			uniform float4x4 proj,
// 			uniform float4x4 worldView)
// {
//     float4 pos = mul(worldView, position);
// 	oPosition = mul(proj, pos);
// }

// float strength_fp(uniform float strength) : COLOR
// {
// 	return -1 + strength;
// }


float4 depth_fp_test( float2 uv : TEXCOORD0,
					    uniform sampler Scene : register(s0),
					    uniform sampler Depth : register(s1)
                        ) : COLOR
{
	float depth = tex2D( Depth, uv ).r;
    float4 color = tex2D( Scene, uv );

    return float4(depth, depth, depth, 1) + color * 0.000001;// + float4(1, 0, 0, 1);
}

static const int SSS_SAMPLE_SIZE = 21;

static const float4 kernel[] = {
        float4(0.0471707,0.0518767,0.056678,0),
        float4(0.0110788,0.0090972,0.00733056,-3.64969),
        float4(0.0259642,0.0217512,0.0180761,-2.95625),
        float4(0.0324297,0.0282824,0.0245684,-2.3358),
        float4(0.0410899,0.037457,0.0339195,-1.78835),
        float4(0.0506442,0.0482512,0.0456326,-1.31389),
        float4(0.0595102,0.0590845,0.0581665,-0.912423),
        float4(0.0656682,0.0675793,0.0689757,-0.583951),
        float4(0.0675242,0.0711833,0.074668,-0.328472),
        float4(0.0650541,0.0693604,0.0737202,-0.145988),
        float4(0.057451,0.0620151,0.0666034,-0.0364969),
        float4(0.057451,0.0620151,0.0666034,0.0364969),
        float4(0.0650541,0.0693604,0.0737202,0.145988),
        float4(0.0675242,0.0711833,0.074668,0.328472),
        float4(0.0656682,0.0675794,0.0689758,0.583951),
        float4(0.0595102,0.0590845,0.0581665,0.912423),
        float4(0.0506442,0.0482512,0.0456325,1.31389),
        float4(0.04109,0.037457,0.0339196,1.78835),
        float4(0.0324297,0.0282824,0.0245684,2.3358),
        float4(0.0259642,0.0217512,0.0180761,2.95625),
        float4(0.0110788,0.0090972,0.00733056,3.64969),
};

float4 sss_fp ( float2 uv : TEXCOORD0,
					    uniform sampler Scene : register(s0),
					    uniform sampler Depth : register(s1),
					    uniform float2 dir,
                        uniform float sssWidth,
                        uniform float fieldOfView // in radians
                        ) : COLOR
{

    float depthM = tex2D( Depth, uv ).r;
    float4 color = tex2D( Scene, uv );
    float strength = tex2D( Depth, uv ).g;

    float distanceToProjectionWindow = 1.0 / tan(0.5 * fieldOfView);
    float scale = distanceToProjectionWindow / depthM;

    if (strength > 0) {
        return color;
    }

    strength = strength + 1;

    float2 finalStep = scale * dir;
    finalStep *= strength;
    finalStep *= 1.0 / (2.0 * sssWidth);

    float4 colorBlurred = color;
    colorBlurred.rgb *= kernel[0].rgb;

    // Accumulate the other samples:
    for (int i = 1; i < SSS_SAMPLE_SIZE; i++) {
        // Fetch color and depth for current sample:
        // float2 offset = uv + float2(1, 1) * dir * (i - SSS_SAMPLE_SIZE / 2) * 0.006;
        float2 offset = uv + kernel[i].a * finalStep;
        float4 offsetColor = tex2D( Scene , offset);
        if (offset.r > 1 || offset.g > 1 || offset.r < 0 || offset.g < 0) {
            offsetColor = color;//float4(1, 0, 0, 1);
        }

        // #if SSSS_FOLLOW_SURFACE == 1
		// 	// If the difference in depth is huge, we lerp color back to "colorM":
		float depth = tex2D( Depth, offset ).r;
        
		float s = clamp( abs(depthM - depth) / (distanceToProjectionWindow * (1 / sssWidth)), 0.0, 1.0);
		s = min(1,s * 3); // custom / user definable scaling

		offsetColor.rgb = mix(offsetColor.rgb, color.rgb, s);
        // #endif

        // Accumulate:
        // colorBlurred += offsetColor / SSS_SAMPLE_SIZE + finalStep.x * 0.0000000001 * kernel[i] * color;
        // colorBlurred.rgb += (float3(1, 1, 1) / SSS_SAMPLE_SIZE) * offsetColor.rgb;

        colorBlurred.rgb += kernel[i].rgb * offsetColor.rgb;
    }

    // if (dir.x == 0 && dir.y == 1) {
    //     return float4(1, 0, 0, 1);
    // }

	return colorBlurred;
}